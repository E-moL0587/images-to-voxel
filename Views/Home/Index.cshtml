<style>
  .hidden { display: none; }
  .title-context { position: fixed; top: 20%; left: 50%; transform: translateX(-50%); }
  .title-image { position: fixed; width: 150px; top: 50%; left: 50%; transform: translate(-50%, -50%); }
  .title-button { position: fixed; bottom: 20%; left: 50%; transform: translateX(-50%); }

  canvas { width: 100vw; height: 100vw; }
  header { z-index: 2; position: fixed; width: 100%; height: 5%; top: 0; background-color: #00ccff; }
  footer { z-index: 2; position: fixed; width: 100%; height: 5%; bottom: 0; background-color: #00ccff; }

  .title-container { z-index: 3; position: fixed; width: 100%; height: 100%; background-color: #ffccff; }
  .voxel-container { position: fixed; width: 100%; height: 50%; top: 5%; }
  .pixels-container { position: fixed; width: 100%; height: 25%; top: 55%; background-color: #00ccff; }
  .menu-container { position: fixed; width: 100%; height: 15%; top: 80%; background-color: #ffcc00; }
  .describe-container { z-index: 1; position: absolute; width: 100%; height: 90%; top: 5%; overflow: hidden; overflow-y: auto; transition: transform 0.5s; transform: translateX(-100%); background-color: #f0f0f0; }

  #describeScreen.close { transform: translateX(-100%); }
  #describeScreen.open { transform: translateX(0); }
</style>

<section id="titleScreen" class="title-container">
  <h3 class="title-context">Images to Voxel</h3>
  <img class="title-image" src="~/images/title.png" alt="title" />
  <button id="titleButton" class="title-button">Tap to Start</button>
</section>

<section id="mainScreen">
  <section class="voxel-container">
    @await Html.PartialAsync("Main")
  </section>

  <section class="pixels-container">
    @await Html.PartialAsync("Pixels")
  </section>

  <section class="menu-container">
    <button onclick="showScene('voxel')">Voxel</button>
    <button onclick="showScene('mesh')">Mesh</button>
    <button onclick="showScene('smooth')">Smooth</button>
    <button onclick="exportSceneToGLB()">Export</button>
    <button id="openDescribeButton">Open</button>

    <form asp-controller="Home" asp-action="Upload" enctype="multipart/form-data" method="post">
      <button type="submit">Apply</button>
      <input type="file" name="frontImage" id="frontImage" accept="image/*" />
      <input type="file" name="sideImage" id="sideImage" accept="image/*" />
      <input type="file" name="topImage" id="topImage" accept="image/*" />
    </form>

    <div>
      <label>R: <input type="range" id="redSlider" min="0" max="255" value="255" oninput="changeColor()"></label>
      <label>G: <input type="range" id="greenSlider" min="0" max="255" value="150" oninput="changeColor()"></label>
      <label>B: <input type="range" id="blueSlider" min="0" max="255" value="255" oninput="changeColor()"></label>
    </div>
  </section>
</section>

<section id="describeScreen" class="describe-container close">
  @await Html.PartialAsync("Describe")
  <button id="closeDescribeButton">Close</button>
</section>

<section id="subScreen">
  <header>
    <p>ImagesToVoxel</p>
  </header>

  <footer>
    <p>aaa</p>
  </footer>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const titleScreen = document.getElementById('titleScreen');
    const titleButton = document.getElementById('titleButton');
    const describeScreen = document.getElementById('describeScreen');
    const openDescribeButton = document.getElementById('openDescribeButton');
    const closeDescribeButton = document.getElementById('closeDescribeButton');

    titleButton.addEventListener('click', function () {
      titleScreen.classList.add('hidden');
    });

    openDescribeButton.addEventListener('click', function () {
      describeScreen.classList.remove('close');
      describeScreen.classList.add('open');
    });

    closeDescribeButton.addEventListener('click', function () {
      describeScreen.classList.remove('open');
      describeScreen.classList.add('close');
    });
  });
</script>
